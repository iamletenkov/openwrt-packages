#!/bin/sh /etc/rc.common
# SPDX-License-Identifier: MIT
# cloud-init lite – setup phase
START=47
STOP=10
USE_PROCD=1

CIDATA_MNT=/run/cidata
MAX_TRIES=${cloud_tries:-30}      # можно изменить в ядре: cloud_tries=N
RETRY_SEC=1

# --- helpers ---------------------------------------------------------------
log()    { logger -t rc.cloud-setup "$*"; }
dbg()    { [ "$cloud_debug" = "1" ] && log "DEBUG: $*"; }

find_cidata_dev() {
	# 1) /dev/sr0 (Proxmox доставляет ISO именно туда)
	[ -b /dev/sr0 ] && echo /dev/sr0 && return
	# 2) поиск по LABEL=cidata|CIDATA
	local dev
	for label in cidata CIDATA ; do
		dev=$(blkid -L "$label" 2>/dev/null) && [ -b "$dev" ] && { echo "$dev"; return; }
	done
}

mount_cidata() {
	local dev
	dev=$(find_cidata_dev) || return 1
	mkdir -p "$CIDATA_MNT"
	# iso9660 (cloud-init NoCloud) или vfat (OpenStack config-drive)
	mount -o ro "$dev" "$CIDATA_MNT" 2>/dev/null && return 0
	umount "$dev" 2>/dev/null
	rmdir "$CIDATA_MNT"
	return 1
}

yaml_get() { # <key> <file>
	awk -F': *' -v k="$1" '$1==k{print $2;exit}' "$2" | tr -d '"'\'' '
}

# ---------- network-config parsing -----------------------------------------
parse_net_ifaces() { # → iface|proto|ip|mask|gw
	awk '
		function flush() { if(i) printf "%s|%s|%s|%s|%s\n", i,p,ip,msk,gw }
		/^[[:space:]]*-[[:space:]]*type:[[:space:]]*physical/ { flush(); i=p=ip=msk=gw=""; next }
		/^[[:space:]]*name:[[:space:]]*/       { i=$2 }
		/-[[:space:]]*type:[[:space:]]*static/ { p="static" }
		/-[[:space:]]*type:[[:space:]]*dhcp4/  { p="dhcp" }
		/^[[:space:]]*address:[[:space:]]*/    { ip=$2 }
		/^[[:space:]]*netmask:[[:space:]]*/    { msk=$2 }
		/^[[:space:]]*gateway:[[:space:]]*/    { gw=$2 }
		END{ flush() }
	' "$1" | tr -d '"'\'' '
}

parse_nameserver() { # → dns|search
	awk '
		BEGIN{dns=search=""}
		/^[[:space:]]*-.*type:[[:space:]]*nameserver/{ns=1;next}
		ns && /^[[:space:]]*address:/{addr=1;next}
		ns && /^[[:space:]]*search:/{addr=0;srch=1;next}
		addr && /^[[:space:]]*-[[:space:]]*/{gsub(/[^0-9.]/,"");dns=$0}
		srch && /^[[:space:]]*-[[:space:]]*/{gsub(/[^A-Za-z0-9_.-]/,"");search=$0}
		END{printf "%s|%s\n",dns,search}
	' "$1"
}

apply_network_config() {
	local f="$1" idx=0 lan
	local dns search
	IFS='|' read dns search <<EOF
$(parse_nameserver "$f")
EOF
	[ -n "$dns" ]   && dns=$(echo "$dns"   | tr -d ' ')
	[ -n "$search" ]&& search=$(echo "$search" | tr -d ' ')

	# очищаем дефолтные lan/wan
	uci -q delete network.lan
	uci -q delete network.wan
	uci -q delete network.@device[0]

	parse_net_ifaces "$f" | while IFS='|' read iface proto ip mask gw; do
		local name
		if [ $idx -eq 0 ]; then name=wan; else name=lan$idx; fi

		uci batch <<-UCI
			set network.$name=interface
			set network.$name.device='$iface'
			set network.$name.proto='${proto:-dhcp}'
		UCI

		if [ "$proto" = "static" ]; then
			[ -n "$ip"   ] && uci set network.$name.ipaddr="$ip"
			[ -n "$mask" ] && uci set network.$name.netmask="$mask"
			[ -n "$gw"   ] && uci set network.$name.gateway="$gw"
		fi

		if [ $idx -eq 0 ] && [ -n "$dns" ]; then
			uci set network.$name.peerdns='0'
			uci set network.$name.dns="$dns"
		fi
		idx=$((idx+1))
	done

	if [ -n "$search$dns" ]; then
		: > /etc/resolv.conf.head
		[ -n "$search" ] && echo "search $search"    >> /etc/resolv.conf.head
		[ -n "$dns"    ] && echo "nameserver $dns"   >> /etc/resolv.conf.head
		cp /etc/resolv.conf.head /etc/resolv.conf
	fi

	uci commit network
}

# -------------------------- main -------------------------------------------
start_service() {
	local try=1
	while [ $try -le $MAX_TRIES ]; do
		mount_cidata && break
		dbg "try $try/$MAX_TRIES – cidata not found"
		sleep $RETRY_SEC
		try=$((try+1))
	done

	if [ ! -d "$CIDATA_MNT" ]; then
		log "cidata not found after $MAX_TRIES tries – skipping cloud-init"
		return 0
	fi
	log "cidata mounted from $(find_cidata_dev)"

	# --- 1. hostname + root-password ---------------------------------------
	if [ -f "$CIDATA_MNT/user-data" ]; then
		local ud="$CIDATA_MNT/user-data"
		local host pass
		host=$(yaml_get fqdn "$ud")
		pass=$(yaml_get password "$ud")

		[ -n "$host" ] && {
			uci set system.@system[0].hostname="$host"
			uci commit system
			log "hostname set to '$host'"
		}

		if [ -n "$pass" ]; then
			sed -i "s|^root:[^:]*:|root:${pass}:|" /etc/shadow
			log "root password hash applied from user-data"
		fi
	fi

	# --- 2. network -----------------------------------------------
	if [ -f "$CIDATA_MNT/network-config" ]; then
		apply_network_config "$CIDATA_MNT/network-config"
		log "network-config applied"
	fi

	/etc/init.d/network restart >/dev/null 2>&1
	umount "$CIDATA_MNT" && rmdir "$CIDATA_MNT"
}

stop_service() { :; }
