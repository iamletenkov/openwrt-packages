#!/bin/sh /etc/rc.common
# ➊ Ранняя стадия (до поднятия сети):
#     • монтирует /dev/sr0 (cidata) → /mnt/cidata
#     • читает meta-data (instance-id – для логов)
#     • парсит network-config и настраивает UCI + DNS
# ➋ Оставляет ISO примонтированной – её используют следующие скрипты

START=47
STOP=10
USE_PROCD=1

CIDATA_DEV="/dev/sr0"
CIDATA_DIR="/mnt/cidata"

# ---------- helpers --------------------------------------------------------
mount_cidata() {
	[ -d "$CIDATA_DIR" ] || mkdir -p "$CIDATA_DIR"
	mountpoint -q "$CIDATA_DIR" && return 0
	mount -o ro "$CIDATA_DEV" "$CIDATA_DIR" 2>/dev/null
}

# iface|proto|ip|mask|gw  (только physical-блоки)
parse_network_config() {
	awk '
		function flush(){ if(iface) printf "%s|%s|%s|%s|%s\n", iface, proto, ip, mask, gw }
		/^[[:space:]]*-[[:space:]]*type:[[:space:]]*physical/{ flush(); iface=proto=ip=mask=gw=""; next }
		/^[[:space:]]*name:/{ iface=$2 }
		/-[[:space:]]*type:[[:space:]]*static/{ proto="static" }
		/-[[:space:]]*type:[[:space:]]*dhcp4/{ proto="dhcp" }
		/^[[:space:]]*address:/{ ip=$2 }
		/^[[:space:]]*netmask:/{ mask=$2 }
		/^[[:space:]]*gateway:/{ gw=$2 }
		END{ flush() }
	' "$1" | tr -d "\"'"
}

# nameserver-блок → DNS|search
read_dns_search() {
	awk '
		BEGIN{dns="";search=""}
		/^[[:space:]]*-.*type:[[:space:]]*nameserver/{ns=1;next}
		ns && /^[[:space:]]*address:/{adr=1;next}
		ns && /^[[:space:]]*search:/{adr=0;srch=1;next}
		adr && /^[[:space:]]*-[[:space:]]*/{gsub(/[^0-9.]/,"",$2); dns=$2}
		srch&&/^[[:space:]]*-[[:space:]]*/{gsub(/[^A-Za-z0-9_.-]/,"",$2); search=$2}
		END{print dns"|"search}
	' "$1"
}

apply_network_config() {
	local cfg="$1"

	# ---- DNS / search ------------------------------------------------------
	IFS='|' read DNS SEARCH <<EOF
$(read_dns_search "$cfg")
EOF
	DNS=$(echo "$DNS" | tr -d ' ')
	SEARCH=$(echo "$SEARCH" | tr -d ' ')

	: > /etc/resolv.conf.head
	[ -n "$SEARCH" ] && echo "search $SEARCH"   >> /etc/resolv.conf.head
	[ -n "$DNS"    ] && echo "nameserver $DNS" >> /etc/resolv.conf.head
	cp /etc/resolv.conf.head /etc/resolv.conf

	# ---- UCI сети ----------------------------------------------------------
	uci -q delete network.@device[0]
	uci -q delete network.lan

	local idx=0
	parse_network_config "$cfg" | while IFS='|' read IFACE PROTO IP NM GW; do
		local name; [ "$idx" = 0 ] && name="wan" || name="lan$idx"

		uci set network.$name=interface
		uci set network.$name.device="$IFACE"
		uci set network.$name.proto="${PROTO:-dhcp}"

		if [ "$PROTO" = "static" ]; then
			[ -n "$IP" ] && uci set network.$name.ipaddr="$IP"
			[ -n "$NM" ] && uci set network.$name.netmask="$NM"
			[ -n "$GW" ] && uci set network.$name.gateway="$GW"
		fi

		# DNS только для первого интерфейса
		if [ "$idx" = 0 ] && [ -n "$DNS" ]; then
			uci set network.$name.peerdns='0'
			uci set network.$name.dns="$DNS"
		fi
		idx=$((idx+1))
	done
	uci commit network

	# DHCP-сервер на первой LAN (если она есть)
	if uci -q get network.lan1 > /dev/null 2>&1; then
		uci set dhcp.lan1=dhcp
		uci set dhcp.lan1.interface='lan1'
		uci set dhcp.lan1.start='10'
		uci set dhcp.lan1.limit='150'
		uci set dhcp.lan1.leasetime='2m'
		uci commit dhcp
		uci set firewall.@zone[1].input='ACCEPT'
		uci set firewall.@zone[1].forward='ACCEPT'
		uci commit firewall
	fi
}

start_service() {
	mount_cidata || {
		logger -t rc.cloud-setup "cidata not found on ${CIDATA_DEV} – skipping"
		return 0
	}

	# meta-data (только логируем instance-id)
	if [ -f "$CIDATA_DIR/meta-data" ]; then
		local iid
		iid=$(grep -m1 '^instance-id' "$CIDATA_DIR/meta-data" | cut -d' ' -f2-)
		[ -n "$iid" ] && logger -t rc.cloud-setup "instance-id: $iid"
	fi

	# network-config → UCI
	if [ -f "$CIDATA_DIR/network-config" ]; then
		logger -t rc.cloud-setup "applying network-config"
		apply_network_config "$CIDATA_DIR/network-config"
		/etc/init.d/network restart
	fi
}

stop_service() { :; }
