#!/bin/sh /etc/rc.common
# rc.cloud-setup – ранняя стадия cloud-init (user-/network-data)
START=47
STOP=10
USE_PROCD=1
PROG="rc.cloud-setup"

# ---------- YAML ⇒ iface|proto|ip|mask|gw  (physical-blocks only) ----------
parse_network_config() {
    awk '
        function flush(){ if(iface) printf "%s|%s|%s|%s|%s\n", iface, proto, ip, mask, gw }
        /^[[:space:]]*-[[:space:]]*type:[[:space:]]*physical/ { flush(); iface=proto=ip=mask=gw=""; next }
        /^[[:space:]]*name:/         { iface=$2 }
        /-[[:space:]]*type:[[:space:]]*static/ { proto="static" }
        /-[[:space:]]*type:[[:space:]]*dhcp4/  { proto="dhcp" }
        /^[[:space:]]*address:/ { if(NF>1) ip=$2 }
        /^[[:space:]]*netmask:/ { if(NF>1) mask=$2 }
        /^[[:space:]]*gateway:/ { if(NF>1) gw=$2 }
        END { flush() }
    ' "$1" | tr -d "\"'"
}

# ---------- nameserver-block ⇒ DNS|search ----------------------------------
read_dns_search() {
    awk '
        BEGIN{dns="";search=""}
        /^[[:space:]]*-.*type:[[:space:]]*nameserver/{ns=1;next}
        ns && /^[[:space:]]*address:/{adr=1;next}
        ns && /^[[:space:]]*search:/{adr=0;srch=1;next}
        adr && /^[[:space:]]*-[[:space:]]*/{gsub(/[^0-9.]/,""); dns=$0; adr=srch=ns=0 }
        srch&& /^[[:space:]]*-[[:space:]]*/{gsub(/[^A-Za-z0-9_.-]/,""); search=$0; adr=srch=ns=0 }
        END{print dns"|",search}
    ' "$1"
}

start_service() {
    mkdir -p /mnt/cidata

    # примонтируем /dev/sr0 (ISO9660) если ещё не примонтирован
    grep -q '/mnt/cidata' /proc/mounts ||
        mount -o ro -t iso9660 /dev/sr0 /mnt/cidata 2>/dev/null || {
            logger -t "$PROG" "cidata not found – skipping cloud-init"
            return 0
        }

    ##################################################################
    # 1. HOSTNAME  +  root PASSWORD  из user-data
    ##################################################################
    if [ -f /mnt/cidata/user-data ]; then
        USERDATA=/mnt/cidata/user-data
        HOST="$(awk -F': *' '$1=="fqdn"{print $2;exit}' "$USERDATA" | tr -d ' "')"
        HASH="$(awk -F': *' '$1=="password"{print $2;exit}' "$USERDATA" | tr -d ' "')"

        [ -n "$HOST" ] && { uci set system.@system[0].hostname="$HOST"; }

        if [ -n "$HASH" ]; then
            sed -i "s|^root:[^:]*:|root:${HASH}:|" /etc/shadow
            logger -t "$PROG" "root password hash applied from cloud-config"
        fi
    fi

    ##################################################################
    # 2. network-config  →  UCI  +  resolv.conf.head
    ##################################################################
    if [ -f /mnt/cidata/network-config ]; then
        NETCFG=/mnt/cidata/network-config
        logger -t "$PROG" "applying network-config"

        # DNS / search
        IFS='|' read DNS SEARCH <<EOF
$(read_dns_search "$NETCFG")
EOF
        DNS="$(echo "$DNS" | tr -d ' ')"
        : > /etc/resolv.conf.head
        [ -n "$SEARCH" ] && echo "search $SEARCH"   >> /etc/resolv.conf.head
        [ -n "$DNS"    ] && echo "nameserver $DNS" >> /etc/resolv.conf.head
        cp /etc/resolv.conf.head /etc/resolv.conf

        # чистим дефолтный br-lan/lan
        uci -q delete network.@device[0]
        uci -q delete network.lan

        IDX=0
        parse_network_config "$NETCFG" | while IFS='|' read IFACE PROTO IP NM GW; do
            if [ $IDX -eq 0 ]; then
                NAME=wan        # первый интерфейс – WAN (управляемый)
                ZONE_IDX=0      # firewall zone wan
            else
                NAME=lan$IDX
            fi

            uci set network.$NAME=interface
            uci set network.$NAME.device="$IFACE"
            uci set network.$NAME.proto="${PROTO:-dhcp}"

            if [ "$PROTO" = "static" ]; then
                [ -n "$IP" ] && uci set network.$NAME.ipaddr="$IP"
                [ -n "$NM" ] && uci set network.$NAME.netmask="$NM"
                [ -n "$GW" ] && uci set network.$NAME.gateway="$GW"
            fi

            # DNS только на WAN
            if [ $IDX -eq 0 ] && [ -n "$DNS" ]; then
                uci set network.$NAME.peerdns='0'
                uci set network.$NAME.dns="$DNS"
            fi

            # DHCP-server на первом LAN (lan1)
            if [ $IDX -eq 1 ]; then
                uci set dhcp.lan1='dhcp'
                uci set dhcp.lan1.interface='lan1'
                uci set dhcp.lan1.start='10'
                uci set dhcp.lan1.limit='150'
                uci set dhcp.lan1.leasetime='12h'
            fi
            IDX=$((IDX+1))
        done

        ##################################################################
        # 3. firewall: открыть LuCI (80/443) на WAN
        ##################################################################
        uci add firewall rule         >/dev/null
        uci set firewall.@rule[-1].name='Allow-LuCI-from-WAN'
        uci set firewall.@rule[-1].src='wan'
        uci set firewall.@rule[-1].proto='tcp'
        uci set firewall.@rule[-1].dest_port='80 443'
        uci set firewall.@rule[-1].target='ACCEPT'

        # либо полностью:
        # uci set firewall.@zone[$ZONE_IDX].input='ACCEPT'

    fi   # network-config

    ##################################################################
    # 4. Применяем и убираем cidata
    ##################################################################
    uci commit
    /etc/init.d/network restart
    /etc/init.d/firewall restart
    umount /mnt/cidata && rmdir /mnt/cidata
}

stop_service() { :; }
